// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: bilibili/community/service/dm/v1/dm.proto
// Protobuf Java Version: 4.29.0

package com.bapis.bilibili.community.service.dm.v1;

/**
 * Protobuf type {@code bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig}
 */
public  final class DanmuDefaultPlayerConfig extends
    com.google.protobuf.GeneratedMessageLite<
        DanmuDefaultPlayerConfig, DanmuDefaultPlayerConfig.Builder> implements
    // @@protoc_insertion_point(message_implements:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
    DanmuDefaultPlayerConfigOrBuilder {
  private DanmuDefaultPlayerConfig() {
  }
  public static final int PLAYER_DANMAKU_USE_DEFAULT_CONFIG_FIELD_NUMBER = 1;
  private boolean playerDanmakuUseDefaultConfig_;
  /**
   * <pre>
   * 是否使用推荐弹幕设置
   * </pre>
   *
   * <code>bool player_danmaku_use_default_config = 1;</code>
   * @return The playerDanmakuUseDefaultConfig.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuUseDefaultConfig() {
    return playerDanmakuUseDefaultConfig_;
  }
  /**
   * <pre>
   * 是否使用推荐弹幕设置
   * </pre>
   *
   * <code>bool player_danmaku_use_default_config = 1;</code>
   * @param value The playerDanmakuUseDefaultConfig to set.
   */
  private void setPlayerDanmakuUseDefaultConfig(boolean value) {
    
    playerDanmakuUseDefaultConfig_ = value;
  }
  /**
   * <pre>
   * 是否使用推荐弹幕设置
   * </pre>
   *
   * <code>bool player_danmaku_use_default_config = 1;</code>
   */
  private void clearPlayerDanmakuUseDefaultConfig() {

    playerDanmakuUseDefaultConfig_ = false;
  }

  public static final int PLAYER_DANMAKU_AI_RECOMMENDED_SWITCH_FIELD_NUMBER = 4;
  private boolean playerDanmakuAiRecommendedSwitch_;
  /**
   * <pre>
   * AI 智能推荐弹幕，是否开启
   * </pre>
   *
   * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
   * @return The playerDanmakuAiRecommendedSwitch.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuAiRecommendedSwitch() {
    return playerDanmakuAiRecommendedSwitch_;
  }
  /**
   * <pre>
   * AI 智能推荐弹幕，是否开启
   * </pre>
   *
   * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
   * @param value The playerDanmakuAiRecommendedSwitch to set.
   */
  private void setPlayerDanmakuAiRecommendedSwitch(boolean value) {
    
    playerDanmakuAiRecommendedSwitch_ = value;
  }
  /**
   * <pre>
   * AI 智能推荐弹幕，是否开启
   * </pre>
   *
   * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
   */
  private void clearPlayerDanmakuAiRecommendedSwitch() {

    playerDanmakuAiRecommendedSwitch_ = false;
  }

  public static final int PLAYER_DANMAKU_AI_RECOMMENDED_LEVEL_FIELD_NUMBER = 5;
  private int playerDanmakuAiRecommendedLevel_;
  /**
   * <pre>
   * AI 智能推荐弹幕，屏蔽等级
   * </pre>
   *
   * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
   * @return The playerDanmakuAiRecommendedLevel.
   */
  @java.lang.Override
  public int getPlayerDanmakuAiRecommendedLevel() {
    return playerDanmakuAiRecommendedLevel_;
  }
  /**
   * <pre>
   * AI 智能推荐弹幕，屏蔽等级
   * </pre>
   *
   * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
   * @param value The playerDanmakuAiRecommendedLevel to set.
   */
  private void setPlayerDanmakuAiRecommendedLevel(int value) {
    
    playerDanmakuAiRecommendedLevel_ = value;
  }
  /**
   * <pre>
   * AI 智能推荐弹幕，屏蔽等级
   * </pre>
   *
   * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
   */
  private void clearPlayerDanmakuAiRecommendedLevel() {

    playerDanmakuAiRecommendedLevel_ = 0;
  }

  public static final int PLAYER_DANMAKU_BLOCKTOP_FIELD_NUMBER = 6;
  private boolean playerDanmakuBlocktop_;
  /**
   * <pre>
   * 是否屏蔽顶端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blocktop = 6;</code>
   * @return The playerDanmakuBlocktop.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlocktop() {
    return playerDanmakuBlocktop_;
  }
  /**
   * <pre>
   * 是否屏蔽顶端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blocktop = 6;</code>
   * @param value The playerDanmakuBlocktop to set.
   */
  private void setPlayerDanmakuBlocktop(boolean value) {
    
    playerDanmakuBlocktop_ = value;
  }
  /**
   * <pre>
   * 是否屏蔽顶端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blocktop = 6;</code>
   */
  private void clearPlayerDanmakuBlocktop() {

    playerDanmakuBlocktop_ = false;
  }

  public static final int PLAYER_DANMAKU_BLOCKSCROLL_FIELD_NUMBER = 7;
  private boolean playerDanmakuBlockscroll_;
  /**
   * <pre>
   * 是否屏蔽滚动弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockscroll = 7;</code>
   * @return The playerDanmakuBlockscroll.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockscroll() {
    return playerDanmakuBlockscroll_;
  }
  /**
   * <pre>
   * 是否屏蔽滚动弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockscroll = 7;</code>
   * @param value The playerDanmakuBlockscroll to set.
   */
  private void setPlayerDanmakuBlockscroll(boolean value) {
    
    playerDanmakuBlockscroll_ = value;
  }
  /**
   * <pre>
   * 是否屏蔽滚动弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockscroll = 7;</code>
   */
  private void clearPlayerDanmakuBlockscroll() {

    playerDanmakuBlockscroll_ = false;
  }

  public static final int PLAYER_DANMAKU_BLOCKBOTTOM_FIELD_NUMBER = 8;
  private boolean playerDanmakuBlockbottom_;
  /**
   * <pre>
   * 是否屏蔽底端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockbottom = 8;</code>
   * @return The playerDanmakuBlockbottom.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockbottom() {
    return playerDanmakuBlockbottom_;
  }
  /**
   * <pre>
   * 是否屏蔽底端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockbottom = 8;</code>
   * @param value The playerDanmakuBlockbottom to set.
   */
  private void setPlayerDanmakuBlockbottom(boolean value) {
    
    playerDanmakuBlockbottom_ = value;
  }
  /**
   * <pre>
   * 是否屏蔽底端弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockbottom = 8;</code>
   */
  private void clearPlayerDanmakuBlockbottom() {

    playerDanmakuBlockbottom_ = false;
  }

  public static final int PLAYER_DANMAKU_BLOCKCOLORFUL_FIELD_NUMBER = 9;
  private boolean playerDanmakuBlockcolorful_;
  /**
   * <pre>
   * 是否屏蔽彩色弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockcolorful = 9;</code>
   * @return The playerDanmakuBlockcolorful.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockcolorful() {
    return playerDanmakuBlockcolorful_;
  }
  /**
   * <pre>
   * 是否屏蔽彩色弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockcolorful = 9;</code>
   * @param value The playerDanmakuBlockcolorful to set.
   */
  private void setPlayerDanmakuBlockcolorful(boolean value) {
    
    playerDanmakuBlockcolorful_ = value;
  }
  /**
   * <pre>
   * 是否屏蔽彩色弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockcolorful = 9;</code>
   */
  private void clearPlayerDanmakuBlockcolorful() {

    playerDanmakuBlockcolorful_ = false;
  }

  public static final int PLAYER_DANMAKU_BLOCKREPEAT_FIELD_NUMBER = 10;
  private boolean playerDanmakuBlockrepeat_;
  /**
   * <pre>
   * 是否屏蔽重复弹幕 (Android only)
   * </pre>
   *
   * <code>bool player_danmaku_blockrepeat = 10;</code>
   * @return The playerDanmakuBlockrepeat.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockrepeat() {
    return playerDanmakuBlockrepeat_;
  }
  /**
   * <pre>
   * 是否屏蔽重复弹幕 (Android only)
   * </pre>
   *
   * <code>bool player_danmaku_blockrepeat = 10;</code>
   * @param value The playerDanmakuBlockrepeat to set.
   */
  private void setPlayerDanmakuBlockrepeat(boolean value) {
    
    playerDanmakuBlockrepeat_ = value;
  }
  /**
   * <pre>
   * 是否屏蔽重复弹幕 (Android only)
   * </pre>
   *
   * <code>bool player_danmaku_blockrepeat = 10;</code>
   */
  private void clearPlayerDanmakuBlockrepeat() {

    playerDanmakuBlockrepeat_ = false;
  }

  public static final int PLAYER_DANMAKU_BLOCKSPECIAL_FIELD_NUMBER = 11;
  private boolean playerDanmakuBlockspecial_;
  /**
   * <pre>
   * 是否屏蔽高级弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockspecial = 11;</code>
   * @return The playerDanmakuBlockspecial.
   */
  @java.lang.Override
  public boolean getPlayerDanmakuBlockspecial() {
    return playerDanmakuBlockspecial_;
  }
  /**
   * <pre>
   * 是否屏蔽高级弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockspecial = 11;</code>
   * @param value The playerDanmakuBlockspecial to set.
   */
  private void setPlayerDanmakuBlockspecial(boolean value) {
    
    playerDanmakuBlockspecial_ = value;
  }
  /**
   * <pre>
   * 是否屏蔽高级弹幕
   * </pre>
   *
   * <code>bool player_danmaku_blockspecial = 11;</code>
   */
  private void clearPlayerDanmakuBlockspecial() {

    playerDanmakuBlockspecial_ = false;
  }

  public static final int PLAYER_DANMAKU_OPACITY_FIELD_NUMBER = 12;
  private float playerDanmakuOpacity_;
  /**
   * <pre>
   * 弹幕不透明度
   * </pre>
   *
   * <code>float player_danmaku_opacity = 12;</code>
   * @return The playerDanmakuOpacity.
   */
  @java.lang.Override
  public float getPlayerDanmakuOpacity() {
    return playerDanmakuOpacity_;
  }
  /**
   * <pre>
   * 弹幕不透明度
   * </pre>
   *
   * <code>float player_danmaku_opacity = 12;</code>
   * @param value The playerDanmakuOpacity to set.
   */
  private void setPlayerDanmakuOpacity(float value) {
    
    playerDanmakuOpacity_ = value;
  }
  /**
   * <pre>
   * 弹幕不透明度
   * </pre>
   *
   * <code>float player_danmaku_opacity = 12;</code>
   */
  private void clearPlayerDanmakuOpacity() {

    playerDanmakuOpacity_ = 0F;
  }

  public static final int PLAYER_DANMAKU_SCALINGFACTOR_FIELD_NUMBER = 13;
  private float playerDanmakuScalingfactor_;
  /**
   * <pre>
   * 弹幕缩放比例
   * </pre>
   *
   * <code>float player_danmaku_scalingfactor = 13;</code>
   * @return The playerDanmakuScalingfactor.
   */
  @java.lang.Override
  public float getPlayerDanmakuScalingfactor() {
    return playerDanmakuScalingfactor_;
  }
  /**
   * <pre>
   * 弹幕缩放比例
   * </pre>
   *
   * <code>float player_danmaku_scalingfactor = 13;</code>
   * @param value The playerDanmakuScalingfactor to set.
   */
  private void setPlayerDanmakuScalingfactor(float value) {
    
    playerDanmakuScalingfactor_ = value;
  }
  /**
   * <pre>
   * 弹幕缩放比例
   * </pre>
   *
   * <code>float player_danmaku_scalingfactor = 13;</code>
   */
  private void clearPlayerDanmakuScalingfactor() {

    playerDanmakuScalingfactor_ = 0F;
  }

  public static final int PLAYER_DANMAKU_DOMAIN_FIELD_NUMBER = 14;
  private float playerDanmakuDomain_;
  /**
   * <pre>
   * 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
   * </pre>
   *
   * <code>float player_danmaku_domain = 14;</code>
   * @return The playerDanmakuDomain.
   */
  @java.lang.Override
  public float getPlayerDanmakuDomain() {
    return playerDanmakuDomain_;
  }
  /**
   * <pre>
   * 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
   * </pre>
   *
   * <code>float player_danmaku_domain = 14;</code>
   * @param value The playerDanmakuDomain to set.
   */
  private void setPlayerDanmakuDomain(float value) {
    
    playerDanmakuDomain_ = value;
  }
  /**
   * <pre>
   * 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
   * </pre>
   *
   * <code>float player_danmaku_domain = 14;</code>
   */
  private void clearPlayerDanmakuDomain() {

    playerDanmakuDomain_ = 0F;
  }

  public static final int PLAYER_DANMAKU_SPEED_FIELD_NUMBER = 15;
  private int playerDanmakuSpeed_;
  /**
   * <pre>
   * 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
   * </pre>
   *
   * <code>int32 player_danmaku_speed = 15;</code>
   * @return The playerDanmakuSpeed.
   */
  @java.lang.Override
  public int getPlayerDanmakuSpeed() {
    return playerDanmakuSpeed_;
  }
  /**
   * <pre>
   * 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
   * </pre>
   *
   * <code>int32 player_danmaku_speed = 15;</code>
   * @param value The playerDanmakuSpeed to set.
   */
  private void setPlayerDanmakuSpeed(int value) {
    
    playerDanmakuSpeed_ = value;
  }
  /**
   * <pre>
   * 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
   * </pre>
   *
   * <code>int32 player_danmaku_speed = 15;</code>
   */
  private void clearPlayerDanmakuSpeed() {

    playerDanmakuSpeed_ = 0;
  }

  public static final int INLINE_PLAYER_DANMAKU_SWITCH_FIELD_NUMBER = 16;
  private boolean inlinePlayerDanmakuSwitch_;
  /**
   * <pre>
   * 是否开启弹幕
   * </pre>
   *
   * <code>bool inline_player_danmaku_switch = 16;</code>
   * @return The inlinePlayerDanmakuSwitch.
   */
  @java.lang.Override
  public boolean getInlinePlayerDanmakuSwitch() {
    return inlinePlayerDanmakuSwitch_;
  }
  /**
   * <pre>
   * 是否开启弹幕
   * </pre>
   *
   * <code>bool inline_player_danmaku_switch = 16;</code>
   * @param value The inlinePlayerDanmakuSwitch to set.
   */
  private void setInlinePlayerDanmakuSwitch(boolean value) {
    
    inlinePlayerDanmakuSwitch_ = value;
  }
  /**
   * <pre>
   * 是否开启弹幕
   * </pre>
   *
   * <code>bool inline_player_danmaku_switch = 16;</code>
   */
  private void clearInlinePlayerDanmakuSwitch() {

    inlinePlayerDanmakuSwitch_ = false;
  }

  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig, Builder> implements
      // @@protoc_insertion_point(builder_implements:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
      com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfigOrBuilder {
    // Construct using com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * 是否使用推荐弹幕设置
     * </pre>
     *
     * <code>bool player_danmaku_use_default_config = 1;</code>
     * @return The playerDanmakuUseDefaultConfig.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuUseDefaultConfig() {
      return instance.getPlayerDanmakuUseDefaultConfig();
    }
    /**
     * <pre>
     * 是否使用推荐弹幕设置
     * </pre>
     *
     * <code>bool player_danmaku_use_default_config = 1;</code>
     * @param value The playerDanmakuUseDefaultConfig to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuUseDefaultConfig(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuUseDefaultConfig(value);
      return this;
    }
    /**
     * <pre>
     * 是否使用推荐弹幕设置
     * </pre>
     *
     * <code>bool player_danmaku_use_default_config = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuUseDefaultConfig() {
      copyOnWrite();
      instance.clearPlayerDanmakuUseDefaultConfig();
      return this;
    }

    /**
     * <pre>
     * AI 智能推荐弹幕，是否开启
     * </pre>
     *
     * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
     * @return The playerDanmakuAiRecommendedSwitch.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuAiRecommendedSwitch() {
      return instance.getPlayerDanmakuAiRecommendedSwitch();
    }
    /**
     * <pre>
     * AI 智能推荐弹幕，是否开启
     * </pre>
     *
     * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
     * @param value The playerDanmakuAiRecommendedSwitch to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuAiRecommendedSwitch(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuAiRecommendedSwitch(value);
      return this;
    }
    /**
     * <pre>
     * AI 智能推荐弹幕，是否开启
     * </pre>
     *
     * <code>bool player_danmaku_ai_recommended_switch = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuAiRecommendedSwitch() {
      copyOnWrite();
      instance.clearPlayerDanmakuAiRecommendedSwitch();
      return this;
    }

    /**
     * <pre>
     * AI 智能推荐弹幕，屏蔽等级
     * </pre>
     *
     * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
     * @return The playerDanmakuAiRecommendedLevel.
     */
    @java.lang.Override
    public int getPlayerDanmakuAiRecommendedLevel() {
      return instance.getPlayerDanmakuAiRecommendedLevel();
    }
    /**
     * <pre>
     * AI 智能推荐弹幕，屏蔽等级
     * </pre>
     *
     * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
     * @param value The playerDanmakuAiRecommendedLevel to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuAiRecommendedLevel(int value) {
      copyOnWrite();
      instance.setPlayerDanmakuAiRecommendedLevel(value);
      return this;
    }
    /**
     * <pre>
     * AI 智能推荐弹幕，屏蔽等级
     * </pre>
     *
     * <code>int32 player_danmaku_ai_recommended_level = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuAiRecommendedLevel() {
      copyOnWrite();
      instance.clearPlayerDanmakuAiRecommendedLevel();
      return this;
    }

    /**
     * <pre>
     * 是否屏蔽顶端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blocktop = 6;</code>
     * @return The playerDanmakuBlocktop.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlocktop() {
      return instance.getPlayerDanmakuBlocktop();
    }
    /**
     * <pre>
     * 是否屏蔽顶端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blocktop = 6;</code>
     * @param value The playerDanmakuBlocktop to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlocktop(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuBlocktop(value);
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽顶端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blocktop = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlocktop() {
      copyOnWrite();
      instance.clearPlayerDanmakuBlocktop();
      return this;
    }

    /**
     * <pre>
     * 是否屏蔽滚动弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockscroll = 7;</code>
     * @return The playerDanmakuBlockscroll.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockscroll() {
      return instance.getPlayerDanmakuBlockscroll();
    }
    /**
     * <pre>
     * 是否屏蔽滚动弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockscroll = 7;</code>
     * @param value The playerDanmakuBlockscroll to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockscroll(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuBlockscroll(value);
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽滚动弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockscroll = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockscroll() {
      copyOnWrite();
      instance.clearPlayerDanmakuBlockscroll();
      return this;
    }

    /**
     * <pre>
     * 是否屏蔽底端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockbottom = 8;</code>
     * @return The playerDanmakuBlockbottom.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockbottom() {
      return instance.getPlayerDanmakuBlockbottom();
    }
    /**
     * <pre>
     * 是否屏蔽底端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockbottom = 8;</code>
     * @param value The playerDanmakuBlockbottom to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockbottom(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuBlockbottom(value);
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽底端弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockbottom = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockbottom() {
      copyOnWrite();
      instance.clearPlayerDanmakuBlockbottom();
      return this;
    }

    /**
     * <pre>
     * 是否屏蔽彩色弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockcolorful = 9;</code>
     * @return The playerDanmakuBlockcolorful.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockcolorful() {
      return instance.getPlayerDanmakuBlockcolorful();
    }
    /**
     * <pre>
     * 是否屏蔽彩色弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockcolorful = 9;</code>
     * @param value The playerDanmakuBlockcolorful to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockcolorful(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuBlockcolorful(value);
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽彩色弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockcolorful = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockcolorful() {
      copyOnWrite();
      instance.clearPlayerDanmakuBlockcolorful();
      return this;
    }

    /**
     * <pre>
     * 是否屏蔽重复弹幕 (Android only)
     * </pre>
     *
     * <code>bool player_danmaku_blockrepeat = 10;</code>
     * @return The playerDanmakuBlockrepeat.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockrepeat() {
      return instance.getPlayerDanmakuBlockrepeat();
    }
    /**
     * <pre>
     * 是否屏蔽重复弹幕 (Android only)
     * </pre>
     *
     * <code>bool player_danmaku_blockrepeat = 10;</code>
     * @param value The playerDanmakuBlockrepeat to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockrepeat(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuBlockrepeat(value);
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽重复弹幕 (Android only)
     * </pre>
     *
     * <code>bool player_danmaku_blockrepeat = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockrepeat() {
      copyOnWrite();
      instance.clearPlayerDanmakuBlockrepeat();
      return this;
    }

    /**
     * <pre>
     * 是否屏蔽高级弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockspecial = 11;</code>
     * @return The playerDanmakuBlockspecial.
     */
    @java.lang.Override
    public boolean getPlayerDanmakuBlockspecial() {
      return instance.getPlayerDanmakuBlockspecial();
    }
    /**
     * <pre>
     * 是否屏蔽高级弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockspecial = 11;</code>
     * @param value The playerDanmakuBlockspecial to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuBlockspecial(boolean value) {
      copyOnWrite();
      instance.setPlayerDanmakuBlockspecial(value);
      return this;
    }
    /**
     * <pre>
     * 是否屏蔽高级弹幕
     * </pre>
     *
     * <code>bool player_danmaku_blockspecial = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuBlockspecial() {
      copyOnWrite();
      instance.clearPlayerDanmakuBlockspecial();
      return this;
    }

    /**
     * <pre>
     * 弹幕不透明度
     * </pre>
     *
     * <code>float player_danmaku_opacity = 12;</code>
     * @return The playerDanmakuOpacity.
     */
    @java.lang.Override
    public float getPlayerDanmakuOpacity() {
      return instance.getPlayerDanmakuOpacity();
    }
    /**
     * <pre>
     * 弹幕不透明度
     * </pre>
     *
     * <code>float player_danmaku_opacity = 12;</code>
     * @param value The playerDanmakuOpacity to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuOpacity(float value) {
      copyOnWrite();
      instance.setPlayerDanmakuOpacity(value);
      return this;
    }
    /**
     * <pre>
     * 弹幕不透明度
     * </pre>
     *
     * <code>float player_danmaku_opacity = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuOpacity() {
      copyOnWrite();
      instance.clearPlayerDanmakuOpacity();
      return this;
    }

    /**
     * <pre>
     * 弹幕缩放比例
     * </pre>
     *
     * <code>float player_danmaku_scalingfactor = 13;</code>
     * @return The playerDanmakuScalingfactor.
     */
    @java.lang.Override
    public float getPlayerDanmakuScalingfactor() {
      return instance.getPlayerDanmakuScalingfactor();
    }
    /**
     * <pre>
     * 弹幕缩放比例
     * </pre>
     *
     * <code>float player_danmaku_scalingfactor = 13;</code>
     * @param value The playerDanmakuScalingfactor to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuScalingfactor(float value) {
      copyOnWrite();
      instance.setPlayerDanmakuScalingfactor(value);
      return this;
    }
    /**
     * <pre>
     * 弹幕缩放比例
     * </pre>
     *
     * <code>float player_danmaku_scalingfactor = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuScalingfactor() {
      copyOnWrite();
      instance.clearPlayerDanmakuScalingfactor();
      return this;
    }

    /**
     * <pre>
     * 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
     * </pre>
     *
     * <code>float player_danmaku_domain = 14;</code>
     * @return The playerDanmakuDomain.
     */
    @java.lang.Override
    public float getPlayerDanmakuDomain() {
      return instance.getPlayerDanmakuDomain();
    }
    /**
     * <pre>
     * 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
     * </pre>
     *
     * <code>float player_danmaku_domain = 14;</code>
     * @param value The playerDanmakuDomain to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuDomain(float value) {
      copyOnWrite();
      instance.setPlayerDanmakuDomain(value);
      return this;
    }
    /**
     * <pre>
     * 弹幕显示区域（0.25=1/4屏；0.5=半屏；0.75=3/4屏；1.0=满屏; 2.0=无限）
     * </pre>
     *
     * <code>float player_danmaku_domain = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuDomain() {
      copyOnWrite();
      instance.clearPlayerDanmakuDomain();
      return this;
    }

    /**
     * <pre>
     * 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
     * </pre>
     *
     * <code>int32 player_danmaku_speed = 15;</code>
     * @return The playerDanmakuSpeed.
     */
    @java.lang.Override
    public int getPlayerDanmakuSpeed() {
      return instance.getPlayerDanmakuSpeed();
    }
    /**
     * <pre>
     * 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
     * </pre>
     *
     * <code>int32 player_danmaku_speed = 15;</code>
     * @param value The playerDanmakuSpeed to set.
     * @return This builder for chaining.
     */
    public Builder setPlayerDanmakuSpeed(int value) {
      copyOnWrite();
      instance.setPlayerDanmakuSpeed(value);
      return this;
    }
    /**
     * <pre>
     * 弹幕速度 (极慢: 10, 慢: 20, 适中: 30, 快: 40, 极快: 50)
     * </pre>
     *
     * <code>int32 player_danmaku_speed = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlayerDanmakuSpeed() {
      copyOnWrite();
      instance.clearPlayerDanmakuSpeed();
      return this;
    }

    /**
     * <pre>
     * 是否开启弹幕
     * </pre>
     *
     * <code>bool inline_player_danmaku_switch = 16;</code>
     * @return The inlinePlayerDanmakuSwitch.
     */
    @java.lang.Override
    public boolean getInlinePlayerDanmakuSwitch() {
      return instance.getInlinePlayerDanmakuSwitch();
    }
    /**
     * <pre>
     * 是否开启弹幕
     * </pre>
     *
     * <code>bool inline_player_danmaku_switch = 16;</code>
     * @param value The inlinePlayerDanmakuSwitch to set.
     * @return This builder for chaining.
     */
    public Builder setInlinePlayerDanmakuSwitch(boolean value) {
      copyOnWrite();
      instance.setInlinePlayerDanmakuSwitch(value);
      return this;
    }
    /**
     * <pre>
     * 是否开启弹幕
     * </pre>
     *
     * <code>bool inline_player_danmaku_switch = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearInlinePlayerDanmakuSwitch() {
      copyOnWrite();
      instance.clearInlinePlayerDanmakuSwitch();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "playerDanmakuUseDefaultConfig_",
            "playerDanmakuAiRecommendedSwitch_",
            "playerDanmakuAiRecommendedLevel_",
            "playerDanmakuBlocktop_",
            "playerDanmakuBlockscroll_",
            "playerDanmakuBlockbottom_",
            "playerDanmakuBlockcolorful_",
            "playerDanmakuBlockrepeat_",
            "playerDanmakuBlockspecial_",
            "playerDanmakuOpacity_",
            "playerDanmakuScalingfactor_",
            "playerDanmakuDomain_",
            "playerDanmakuSpeed_",
            "inlinePlayerDanmakuSwitch_",
          };
          java.lang.String info =
              "\u0000\u000e\u0000\u0000\u0001\u0010\u000e\u0000\u0000\u0000\u0001\u0007\u0004\u0007" +
              "\u0005\u0004\u0006\u0007\u0007\u0007\b\u0007\t\u0007\n\u0007\u000b\u0007\f\u0001" +
              "\r\u0001\u000e\u0001\u000f\u0004\u0010\u0007";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig> parser = PARSER;
        if (parser == null) {
          synchronized (com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  private static final com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig DEFAULT_INSTANCE;
  static {
    DanmuDefaultPlayerConfig defaultInstance = new DanmuDefaultPlayerConfig();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      DanmuDefaultPlayerConfig.class, defaultInstance);
  }

  public static com.bapis.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DanmuDefaultPlayerConfig> PARSER;

  public static com.google.protobuf.Parser<DanmuDefaultPlayerConfig> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

